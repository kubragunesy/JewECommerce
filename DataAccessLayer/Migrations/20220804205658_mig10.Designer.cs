// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220804205658_mig10")]
    partial class mig10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityLayer.Concrete.Admin", b =>
                {
                    b.Property<int>("adminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("adminID"), 1L, 1);

                    b.Property<bool>("adminStatu")
                        .HasColumnType("bit");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.HasKey("adminID");

                    b.HasIndex("customerID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Adress", b =>
                {
                    b.Property<int>("adressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("adressID"), 1L, 1);

                    b.Property<string>("adressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("adressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.HasKey("adressID");

                    b.HasIndex("customerID");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("EntityLayer.Concrete.BankCard", b =>
                {
                    b.Property<int>("bankCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bankCardID"), 1L, 1);

                    b.Property<string>("bankCardExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankCardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankCardNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("bankCardType")
                        .HasColumnType("bit");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.HasKey("bankCardID");

                    b.HasIndex("customerID");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Category", b =>
                {
                    b.Property<int>("categoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryID"), 1L, 1);

                    b.Property<string>("categoryImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Collection", b =>
                {
                    b.Property<int>("collectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("collectionID"), 1L, 1);

                    b.Property<string>("collectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("collectionID");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Customer", b =>
                {
                    b.Property<int>("customerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customerID"), 1L, 1);

                    b.Property<DateTime>("customerBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("customerCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("customerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("customerStatu")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Discount", b =>
                {
                    b.Property<int>("discountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("discountID"), 1L, 1);

                    b.Property<DateTime>("discountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("discountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("discountRate")
                        .HasColumnType("real");

                    b.Property<bool>("discountStatu")
                        .HasColumnType("bit");

                    b.HasKey("discountID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentMethod", b =>
                {
                    b.Property<int>("paymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paymentMethodID"), 1L, 1);

                    b.Property<string>("paymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paymentMethodID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PreOrder", b =>
                {
                    b.Property<int>("preOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("preOrderID"), 1L, 1);

                    b.Property<bool>("cartStatu")
                        .HasColumnType("bit");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.Property<int>("paymentMethodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("preOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("preOrderDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("preOrderNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("preOrderQuantity")
                        .HasColumnType("int");

                    b.Property<byte>("preOrderStatu")
                        .HasColumnType("tinyint");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.HasKey("preOrderID");

                    b.HasIndex("customerID");

                    b.HasIndex("paymentMethodID");

                    b.HasIndex("productID");

                    b.ToTable("PreOrders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Product", b =>
                {
                    b.Property<int>("productID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productID"), 1L, 1);

                    b.Property<int>("categoryID")
                        .HasColumnType("int");

                    b.Property<int>("collectionID")
                        .HasColumnType("int");

                    b.Property<int>("discountID")
                        .HasColumnType("int");

                    b.Property<string>("productColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("productUnitInStock")
                        .HasColumnType("smallint");

                    b.Property<int>("productUnitPrice")
                        .HasColumnType("int");

                    b.HasKey("productID");

                    b.HasIndex("categoryID");

                    b.HasIndex("collectionID");

                    b.HasIndex("discountID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Remand", b =>
                {
                    b.Property<int>("remandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("remandID"), 1L, 1);

                    b.Property<bool>("RemandStatu")
                        .HasColumnType("bit");

                    b.Property<int>("preOrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("remandDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("remandReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("remandID");

                    b.HasIndex("preOrderID");

                    b.ToTable("Remands");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Admin", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Customer", "customer")
                        .WithMany("admins")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Adress", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Customer", "customer")
                        .WithMany("adresses")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EntityLayer.Concrete.BankCard", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Customer", "customer")
                        .WithMany("bankCards")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PreOrder", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Customer", "customer")
                        .WithMany("preOrders")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.PaymentMethod", "paymentMethod")
                        .WithMany("preOrders")
                        .HasForeignKey("paymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Product", "product")
                        .WithMany("preOrders")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("paymentMethod");

                    b.Navigation("product");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Product", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Collection", "collection")
                        .WithMany("products")
                        .HasForeignKey("collectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Discount", "discount")
                        .WithMany("products")
                        .HasForeignKey("discountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("collection");

                    b.Navigation("discount");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Remand", b =>
                {
                    b.HasOne("EntityLayer.Concrete.PreOrder", "preOrder")
                        .WithMany("remands")
                        .HasForeignKey("preOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("preOrder");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Collection", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Customer", b =>
                {
                    b.Navigation("admins");

                    b.Navigation("adresses");

                    b.Navigation("bankCards");

                    b.Navigation("preOrders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Discount", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PaymentMethod", b =>
                {
                    b.Navigation("preOrders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.PreOrder", b =>
                {
                    b.Navigation("remands");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Product", b =>
                {
                    b.Navigation("preOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
